const questions = [
  {
    id: 1,
    title: "Check for Palindrome",
    description: "Given a string, determine whether it is a palindrome.",
    input: "madam",
    output: "True",
  },
  {
    id: 2,
    title: "Two Sum (Indices)",
    description: "Given array and target, print indices i j such that a[i]+a[j]=target.",
    input: "5\n2 7 11 15 3\n9",
    output: "0 1",
  },
  {
    id: 3,
    title: "Reverse a String",
    description: "Reverse the given string.",
    input: "hello",
    output: "olleh",
  },
  {
    id: 4,
    title: "Fibonacci N",
    description: "Print the Nth Fibonacci number (0-indexed, Fib(0)=0,Fib(1)=1).",
    input: "7",
    output: "13",
  },
  {
    id: 5,
    title: "Count Vowels",
    description: "Count vowels in the given lowercase string.",
    input: "abracadabra",
    output: "5",
  },
  {
    id: 6,
    title: "Valid Parentheses",
    description: "Check if parentheses string is valid.",
    input: "()[]{}",
    output: "True",
  },
  {
    id: 7,
    title: "Max Subarray Sum",
    description: "Print the maximum subarray sum.",
    input: "9\n-2 1 -3 4 -1 2 1 -5 4",
    output: "6",
  },
  {
    id: 8,
    title: "Anagram Check",
    description: "Check whether two strings are anagrams.",
    input: "listen\nsilent",
    output: "True",
  },
  {
    id: 9,
    title: "Factorial",
    description: "Compute factorial of N.",
    input: "5",
    output: "120",
  },
  {
    id: 10,
    title: "Matrix Diagonal Sum",
    description: "Sum both diagonals of an n x n matrix.",
    input: "3\n1 2 3\n4 5 6\n7 8 9",
    output: "30",
  },
  {
    id: 11,
    title: "Find Minimum in Array",
    description: "Find the minimum element in the given array.",
    input: "6\n5 3 8 6 2 7",
    output: "2",
  },
  {
    id: 12,
    title: "Find Maximum in Array",
    description: "Find the maximum element in the given array.",
    input: "6\n5 3 8 6 2 7",
    output: "8",
  },
  {
    id: 13,
    title: "Binary Search",
    description: "Find the index of target using binary search.",
    input: "6\n1 2 3 4 5 6\n4",
    output: "3",
  },
  {
    id: 14,
    title: "Linear Search",
    description: "Find the index of target using linear search.",
    input: "5\n10 20 30 40 50\n30",
    output: "2",
  },
  {
    id: 15,
    title: "Check Prime",
    description: "Check if a number is prime.",
    input: "7",
    output: "True",
  },
  {
    id: 16,
    title: "GCD of Two Numbers",
    description: "Compute the greatest common divisor.",
    input: "24 36",
    output: "12",
  },
  {
    id: 17,
    title: "LCM of Two Numbers",
    description: "Compute the least common multiple.",
    input: "4 6",
    output: "12",
  },
  {
    id: 18,
    title: "Armstrong Number",
    description: "Check if a number is an Armstrong number.",
    input: "153",
    output: "True",
  },
  {
    id: 19,
    title: "Sum of Digits",
    description: "Find the sum of digits of the number.",
    input: "1234",
    output: "10",
  },
  {
    id: 20,
    title: "Power of a Number",
    description: "Compute a^b.",
    input: "2 5",
    output: "32",
  },
  {
    id: 21,
    title: "String Length",
    description: "Find the length of the given string.",
    input: "OpenAI",
    output: "6",
  },
  {
    id: 22,
    title: "Remove Vowels",
    description: "Remove vowels from the given string.",
    input: "hello world",
    output: "hll wrld",
  },
  {
    id: 23,
    title: "Check Pangram",
    description: "Check if string contains every letter of English alphabet.",
    input: "the quick brown fox jumps over the lazy dog",
    output: "True",
  },
  {
    id: 24,
    title: "Check Subsequence",
    description: "Check if s2 is subsequence of s1.",
    input: "abcde\nace",
    output: "True",
  },
  {
    id: 25,
    title: "Merge Two Sorted Arrays",
    description: "Merge two sorted arrays.",
    input: "3\n1 3 5\n3\n2 4 6",
    output: "1 2 3 4 5 6",
  },
  {
    id: 26,
    title: "Intersection of Arrays",
    description: "Find common elements of two arrays.",
    input: "4\n1 2 2 1\n2\n2 2",
    output: "2",
  },
  {
    id: 27,
    title: "Union of Arrays",
    description: "Find union of two arrays.",
    input: "3\n1 2 3\n3\n2 3 4",
    output: "1 2 3 4",
  },
  {
    id: 28,
    title: "Rotate Array",
    description: "Rotate array by k steps.",
    input: "7\n1 2 3 4 5 6 7\n3",
    output: "5 6 7 1 2 3 4",
  },
  {
    id: 29,
    title: "Second Largest Element",
    description: "Find second largest element in array.",
    input: "5\n10 20 4 45 99",
    output: "45",
  },
  {
    id: 30,
    title: "Missing Number",
    description: "Find missing number from 1 to n.",
    input: "5\n1 2 4 5",
    output: "3",
  },
  {
    id: 31,
    title: "Duplicate Elements",
    description: "Find duplicates in array.",
    input: "6\n1 3 4 2 2 5",
    output: "2",
  },
  {
    id: 32,
    title: "Majority Element",
    description: "Find element that appears more than n/2 times.",
    input: "7\n3 3 4 2 4 4 4",
    output: "4",
  },
  {
    id: 33,
    title: "Search in Rotated Sorted Array",
    description: "Find target in rotated sorted array.",
    input: "7\n4 5 6 7 0 1 2\n0",
    output: "4",
  },
  {
    id: 34,
    title: "First Unique Character",
    description: "Find first non-repeating character in string.",
    input: "leetcode",
    output: "l",
  },
  {
    id: 35,
    title: "Longest Common Prefix",
    description: "Find longest common prefix of given strings.",
    input: "3\nflower flow flight",
    output: "fl",
  },
  {
    id: 36,
    title: "Valid Anagram",
    description: "Check if two strings are valid anagrams.",
    input: "anagram\nnagaram",
    output: "True",
  },
  {
    id: 37,
    title: "Valid Palindrome (Alphanumeric)",
    description: "Check palindrome ignoring non-alphanumeric.",
    input: "A man, a plan, a canal: Panama",
    output: "True",
  },
  {
    id: 38,
    title: "String to Integer (atoi)",
    description: "Convert string to integer.",
    input: "   -42",
    output: "-42",
  },
  {
    id: 39,
    title: "Implement strStr",
    description: "Return index of first occurrence of needle in haystack.",
    input: "hello\nll",
    output: "2",
  },
  {
    id: 40,
    title: "Count Words",
    description: "Count number of words in a sentence.",
    input: "I love programming",
    output: "3",
  },
  {
    id: 41,
    title: "Remove Duplicates from String",
    description: "Remove duplicate characters from string.",
    input: "programming",
    output: "progamin",
  },
  {
    id: 42,
    title: "Check Balanced Binary Tree",
    description: "Check if binary tree is height balanced. (Input as array BFS)",
    input: "7\n3 9 20 null null 15 7",
    output: "True",
  },
  {
    id: 43,
    title: "Level Order Traversal",
    description: "Return level order traversal of binary tree. (Input as array BFS)",
    input: "7\n3 9 20 null null 15 7",
    output: "[[3],[9,20],[15,7]]",
  },
  {
    id: 44,
    title: "Height of Binary Tree",
    description: "Find height of binary tree. (Input as array BFS)",
    input: "5\n1 2 3 4 5",
    output: "3",
  },
  {
    id: 45,
    title: "Inorder Traversal",
    description: "Perform inorder traversal of binary tree.",
    input: "3\n1 null 2 3",
    output: "[1,3,2]",
  },
  {
    id: 46,
    title: "Preorder Traversal",
    description: "Perform preorder traversal of binary tree.",
    input: "3\n1 null 2 3",
    output: "[1,2,3]",
  },
  {
    id: 47,
    title: "Postorder Traversal",
    description: "Perform postorder traversal of binary tree.",
    input: "3\n1 null 2 3",
    output: "[3,2,1]",
  },
  {
    id: 48,
    title: "Count Nodes in Tree",
    description: "Count number of nodes in binary tree.",
    input: "5\n1 2 3 4 5",
    output: "5",
  },
  {
    id: 49,
    title: "Lowest Common Ancestor",
    description: "Find lowest common ancestor of two nodes.",
    input: "6\n3 5 1 6 2 0 8\n5 1",
    output: "3",
  },
  {
    id: 50,
    title: "Graph BFS Traversal",
    description: "Perform BFS traversal of graph.",
    input: "5\n0 1\n0 2\n1 3\n1 4",
    output: "0 1 2 3 4",
  },
];

export default questions;
